#!/bin/bash
set -e
set -eo pipefail

# Get action from first argument, default to build
ACTION="${1:-build}"

# Get scheme name from second argument, default to ShopifyCheckoutSheetKit
SCHEME="${2:-ShopifyCheckoutSheetKit-Package}"

# Get optional test filter from third argument
TEST_FILTER="${3:-}"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Validate action contains at least one of: build, test, or clean
if [[ "$ACTION" != *"build"* && "$ACTION" != *"test"* && "$ACTION" != *"clean"* ]]; then
    echo "Error: ACTION must contain 'build', 'test', or 'clean', got '$ACTION'"
    exit 1
fi

if [[ -n $CURRENT_SIMULATOR_UUID ]]; then
    dest="id=$CURRENT_SIMULATOR_UUID"
else
    # Get a valid iPhone simulator ID using get_device_id.sh
    DEVICE_ID=$("$SCRIPT_DIR/get_device_id" "iPhone 16")
    dest="id=$DEVICE_ID"
fi

xcodebuild_cmd="xcodebuild $ACTION -scheme $SCHEME -sdk iphonesimulator -destination \"$dest\" -skipPackagePluginValidation"

# Add test filtering if specified
if [[ "$ACTION" == *"test"* && -n "$TEST_FILTER" ]]; then
    # If TEST_FILTER already contains a slash, use it as-is (e.g., "ShopifyAcceleratedCheckoutsTests/PKEncoderTests")
    # Otherwise, find which target contains the test class
    if [[ "$TEST_FILTER" == *"/"* ]]; then
        xcodebuild_cmd="$xcodebuild_cmd -only-testing:$TEST_FILTER"
    else
        # Find which test target contains this test class (search all test targets automatically)
        project_root="$(cd "$SCRIPT_DIR/.." && pwd)"
        test_target=""
        
        # Discover all test targets by looking for *Tests directories
        test_file=""
        for test_dir in "$project_root/Tests"/*Tests; do
            if [[ -d "$test_dir" ]]; then
                target_name=$(basename "$test_dir")
                # Check if TEST_FILTER matches a .swift filename
                if find "$test_dir" -name "$TEST_FILTER.swift" -type f | grep -q .; then
                    test_target="$target_name"
                    test_file=$(find "$test_dir" -name "$TEST_FILTER.swift" -type f | head -1)
                    break
                fi
            fi
        done
        
        if [[ -n "$test_target" && -n "$test_file" ]]; then
            # Extract all test class names from the file
            test_classes=$(grep "class.*XCTestCase" "$test_file" | sed 's/.*class \([^:]*\):.*/\1/')
            
            if [[ -n "$test_classes" ]]; then
                # Add -only-testing for each test class found in the file
                while IFS= read -r class_name; do
                    [[ -n "$class_name" ]] && xcodebuild_cmd="$xcodebuild_cmd -only-testing:$test_target/$class_name"
                done <<< "$test_classes"
            else
                # Fall back to original behavior if no test classes found
                xcodebuild_cmd="$xcodebuild_cmd -only-testing:$test_target/$TEST_FILTER"
            fi
        else
            echo "Error: Test class '$TEST_FILTER' not found in any test target"
            exit 1
        fi
    fi
fi

if command -v xcbeautify >/dev/null 2>&1; then
    eval "$xcodebuild_cmd" | xcbeautify
else
    eval "$xcodebuild_cmd"
fi
