---
description: Swift development workflow and language server workarounds
globs: ["**/*.swift"]
alwaysApply: true
---

# SWIFT DEVELOPMENT WORKFLOW

## ⚠️ IMPORTANT: Language Server Issues

**IGNORE ALL LANGUAGE SERVER ERRORS IN SWIFT FILES**
- The language server reports errors erroneously while code compiles fine
- Do NOT trust red squiggles or inline error messages
- Always verify issues using the commands below instead

## Verification Commands

### Check your work systematically:
1. **Lint & Format** → `dev lint` (or `dev style`) - Checks for linting and stylistic errors
2. **Build Issues** → `dev build` - Checks for compilation issues
3. **Test Issues** → `dev test` - Checks for failing tests 

### Available dev commands:
```bash
# Code Quality
dev lint          # Check format & lint issues (alias: dev style)
dev fix           # auto fixes formatting and linting issues

# Building
dev build packages    # Build ShopifyCheckoutSheetKit & ShopifyAcceleratedCheckouts
dev build samples     # Build sample apps

# Testing  
dev test packages     # Test the packages
dev test samples      # Test sample apps

# Apollo/GraphQL
dev apollo download_schema  # Download GraphQL schema
dev apollo codegen         # Generate Apollo client code
```

## Workflow Best Practices

### When you see errors:
❌ DON'T: Trust language server errors in Xcode/editor
✅ DO: Run the appropriate dev command to verify

### After making changes:
- ALWAYS run `dev fix && dev lint` to check your code is formatted and written in our style.

## Example Workflow

```bash
# Make your Swift changes...

# Fix any auto-fixable issues
dev fix

# Check for any remaining lint issues
dev lint

# Verify it compiles
dev build

# Run tests if needed
dev test packages
```
